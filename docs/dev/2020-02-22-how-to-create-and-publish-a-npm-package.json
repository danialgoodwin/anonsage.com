{"html":"<p>Assuming that you already have <code>npm</code> installed, then creating and publishing a new npm package is really easy and fast. Keep in mind that these are the minimum recommended steps, and I&#39;ll provide more resources at the bottom for more configuration options and deeper dives.</p>\n<p>The first section show how to publish the npm package, then the second section shows how to use it in another JavaScript project.</p>\n<h2 id=\"how-to-publish\">How to Publish</h2>\n<ol>\n<li><p>(Recommended, optional) Create a new remote git repo with a README.md file</p>\n<ul>\n<li>The benefit of having the remote repo already setup is to allow the npm setup to be smarter, filling out more git-related fields automatically.</li>\n</ul>\n</li>\n<li><p>Create a local project directory:</p>\n<ul>\n<li>If you have the remote repo, then run: <code>git clone &lt;my-repo-url&gt;</code></li>\n<li>If you don&#39;t want a remote repo, then run: <code>mkdir &lt;my-project-name&gt;</code></li>\n</ul>\n</li>\n<li><p>Setup the npm project:</p>\n<ol>\n<li>Run: <code>cd &lt;my-project-name&gt; &amp;&amp; npm init</code></li>\n<li>Follow the interactive steps until the package.json file is created. At least add a name and email.</li>\n</ol>\n</li>\n<li><p>Create &#39;index.js&#39; and add the following content as an example:</p>\n<pre class='language-javascriptreact'><code> <span class=\"hljs-keyword\">const</span> utils = {\n   isOdd (num) {\n     <span class=\"hljs-keyword\">return</span> num % <span class=\"hljs-number\">2</span> === <span class=\"hljs-number\">1</span>\n   },\n   sayHello () {\n     <span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-string\">'Hello, World!'</span>)\n   }\n }\n\n <span class=\"hljs-built_in\">module</span>.exports = utils</code></pre></li>\n<li><p>Create &#39;.gitignore&#39; and add the following content (&#39;npm pack&#39; in the next step uses this file):</p>\n<pre class='language-javascriptreact'><code> *.tgz\n .idea/\n node_modules/</code></pre></li>\n<li><p>(Optional) Ensure that the correct files will be uploaded for the npm package:</p>\n<ol>\n<li>Run: <code>npm pack</code></li>\n<li>Check the output of the &#39;Tarball Contents&#39; sections</li>\n</ol>\n</li>\n<li><p>Publish your new npm package: :)</p>\n<ol>\n<li>Run: <code>npm publish</code></li>\n<li>Ensure that there is no error. If you have a package name that is already taken, then there will be an error and you&#39;ll have to update the &#39;name&#39; in &#39;package.json&#39;</li>\n</ol>\n</li>\n<li><p>(Optional) To see your package in the npm registry, run: <code>npm home &lt;my-package-name&gt;</code></p>\n</li>\n</ol>\n<h2 id=\"how-to-use\">How to Use</h2>\n<ol>\n<li><p>(Optional) Create a new npm project:</p>\n<ol>\n<li>Run: <code>mkdir &lt;my-new-project-name&gt; &amp;&amp; cd &lt;my-new-project-name&gt; &amp;&amp; npm init -y</code><ul>\n<li>Note: The <code>-y</code> means accept all the default values</li>\n</ul>\n</li>\n</ol>\n</li>\n<li><p>In your new project, install your new npm package (use the package name from the above section)</p>\n<ol>\n<li>Run: <code>npm install --save &lt;my-npm-package-name&gt;</code><ul>\n<li>Sidenote: An equivalent command is &#39;npm i -S <my-npm-package-name>&#39;</li>\n</ul>\n</li>\n</ol>\n</li>\n<li><p>Create &#39;index.js&#39; and add the following content as an example (and replace <my-npm-package-name> below):</p>\n<pre class='language-javascriptreact'><code> <span class=\"hljs-keyword\">const</span> utils = <span class=\"hljs-built_in\">require</span>(<span class=\"hljs-string\">'&lt;my-npm-package-name&gt;'</span>)\n utils.sayHello()\n <span class=\"hljs-built_in\">console</span>.log(utils.idOdd(<span class=\"hljs-number\">1</span>))\n <span class=\"hljs-built_in\">console</span>.log(utils.idOdd(<span class=\"hljs-number\">2</span>))</code></pre></li>\n<li><p>Run your project: <code>node index.js</code></p>\n<pre class='language-javascriptreact'><code> <span class=\"hljs-comment\">// Output</span>\n Hello, World!\n <span class=\"hljs-literal\">true</span>\n <span class=\"hljs-literal\">false</span></code></pre></li>\n</ol>\n<p>Congrats on creating your new npm package! :)</p>\n<h2 id=\"helpful-resources\">Helpful Resources</h2>\n<ul>\n<li>Great: <a href=\"https://zellwk.com/blog/publish-to-npm/\">https://zellwk.com/blog/publish-to-npm/</a><ul>\n<li><a href=\"https://zellwk.com/blog/publishing-npm-packages-that-can-be-used-in-browsers-and-node/\">https://zellwk.com/blog/publishing-npm-packages-that-can-be-used-in-browsers-and-node/</a></li>\n</ul>\n</li>\n<li>Great: <a href=\"https://webpack.js.org/guides/author-libraries/\">https://webpack.js.org/guides/author-libraries/</a></li>\n<li>Great: <a href=\"https://itnext.io/step-by-step-building-and-publishing-an-npm-typescript-package-44fe7164964c\">https://itnext.io/step-by-step-building-and-publishing-an-npm-typescript-package-44fe7164964c</a><ul>\n<li>Includes great additions for automating the build and publish process</li>\n</ul>\n</li>\n</ul>\n","title":"How to create and publish a NPM package","tags":["npm","JavaScript"],"file":"2020-02-22-how-to-create-and-publish-a-npm-package.md","date":"2020-02-22","slug":"2020-02-22-how-to-create-and-publish-a-npm-package","next":{"slug":"2020-03-01-thought-experiment-one-file-apps--part-1","name":"Thought Experiment: 1-File Apps (Part 1)"},"previous":{"slug":"2020-02-21-how-to-create-a-custom-visual-in-power-bi-using-google-charts","name":"How to create a custom visual in Power BI using Google Charts"}}