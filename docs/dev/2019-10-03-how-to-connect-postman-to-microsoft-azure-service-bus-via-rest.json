{"html":"<p>The title says it all, so let&#39;s jump right in! Hopefully, I haven&#39;t missed any steps, but it&#39;s possible. So, let me know if there are any issues or if there are any steps that I should clarify.</p>\n<ol>\n<li><p>Create Azure Service Bus</p>\n<ol>\n<li>In portal.azure.com, create a new &#39;Service Bus&#39; resource (choose the &#39;Standard&#39; pricing tier or higher if you want to use Service Bus Topics)</li>\n<li>Navigate to the resource after it is created, then add a &#39;Queue&#39; or &#39;Topic&#39; entity</li>\n<li>After the entity is created, navigate into it for details that you will need in the next step, like &#39;Queue URL&#39; and &#39;Topic URL&#39;</li>\n</ol>\n</li>\n<li><p>Create SAS token</p>\n<ol>\n<li><p>Create a new C# project with the following code:</p>\n<pre class='language-javascriptreact'><code> using System;\n using System.Globalization;\n using System.Security.Cryptography;\n using System.Text;\n using System.Web;\n\n <span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">MainClass</span>\n </span>{\n\n     <span class=\"hljs-keyword\">static</span> readonly string queueOrTopicUrl = <span class=\"hljs-string\">\"TODO\"</span>; <span class=\"hljs-comment\">// Format: \"https://&lt;service bus namespace&gt;.servicebus.windows.net/&lt;topic name or queue&gt;/messages\";</span>\n     <span class=\"hljs-keyword\">static</span> readonly string signatureKeyName = <span class=\"hljs-string\">\"TODO\"</span>;\n     <span class=\"hljs-keyword\">static</span> readonly string signatureKey = <span class=\"hljs-string\">\"TODO\"</span>;\n     <span class=\"hljs-keyword\">static</span> readonly TimeSpan timeToLive = TimeSpan.FromDays(<span class=\"hljs-number\">1</span>);\n\n     public <span class=\"hljs-keyword\">static</span> <span class=\"hljs-keyword\">void</span> Main(string[] args)\n     {\n         <span class=\"hljs-keyword\">var</span> token = GetSasToken(queueOrTopicUrl, signatureKeyName, signatureKey, timeToLive);\n         Console.WriteLine(<span class=\"hljs-string\">\"Authorization: \"</span> + token);\n     }\n\n     public <span class=\"hljs-keyword\">static</span> string GetSasToken(string resourceUri, string keyName, string key, TimeSpan ttl)\n     {\n         <span class=\"hljs-keyword\">var</span> expiry = GetExpiry(ttl);\n         string stringToSign = HttpUtility.UrlEncode(resourceUri) + <span class=\"hljs-string\">\"\\n\"</span> + expiry;\n         HMACSHA256 hmac = <span class=\"hljs-keyword\">new</span> HMACSHA256(Encoding.UTF8.GetBytes(key));\n         <span class=\"hljs-keyword\">var</span> signature = Convert.ToBase64String(hmac.ComputeHash(Encoding.UTF8.GetBytes(stringToSign)));\n         <span class=\"hljs-keyword\">var</span> sasToken = <span class=\"hljs-built_in\">String</span>.Format(CultureInfo.InvariantCulture, <span class=\"hljs-string\">\"SharedAccessSignature sr={0}&amp;sig={1}&amp;se={2}&amp;skn={3}\"</span>,\n         HttpUtility.UrlEncode(resourceUri), HttpUtility.UrlEncode(signature), expiry, keyName);\n         <span class=\"hljs-keyword\">return</span> sasToken;\n     }\n\n     private <span class=\"hljs-keyword\">static</span> string GetExpiry(TimeSpan ttl)\n     {\n         TimeSpan expirySinceEpoch = DateTime.UtcNow - <span class=\"hljs-keyword\">new</span> DateTime(<span class=\"hljs-number\">1970</span>, <span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">1</span>) + ttl;\n         <span class=\"hljs-keyword\">return</span> Convert.ToString((int)expirySinceEpoch.TotalSeconds);\n     }\n\n }</code></pre></li>\n<li><p>In the code, update the fields:</p>\n<ul>\n<li><code>queueUrl</code>: Find this value in Azure Portal &gt; your Service Bus Namespace &gt; &#39;Queues&#39; or &#39;Topics&#39;, then click on the specific entity, then copy the value for &#39;Queue URL&#39; or &#39;Topic URL&#39;</li>\n<li><code>signatureKeyName</code>: Find this value in Azure Portal &gt; your Service Bus Namespace &gt; &#39;Shared access policies&#39;, then under the &#39;Policy&#39; column</li>\n<li><code>signatureKey</code>: Find this value after clicking on the key from above, then use either &#39;Primary Key&#39; or &#39;Secondary Key&#39;</li>\n</ul>\n</li>\n<li><p>Run the code. Save the output for the next step &#39;Setup Postman&#39;</p>\n</li>\n</ol>\n</li>\n<li><p>Setup Postman</p>\n<ol>\n<li>REST type: POST</li>\n<li>URL: <code>https://&lt;service namespace&gt;.servicebus.windows.net/&lt;topic name or queue&gt;/messages</code> (Ex: <code>https://myservicebus.servicebus.windows.net/my-topic/messages</code>)</li>\n<li>Headers:<ul>\n<li>Authorization: <code>SharedAccessSignature sr=https%3a%2f%2f&lt;service namespace&gt;.servicebus.windows.net%2f&lt;topic name or queue&gt;%2fmessages&amp;sig=&lt;signature hash&gt;&amp;se=&lt;expiry time&gt;&amp;skn=&lt;signature key name&gt;</code> (Ex: <code>SharedAccessSignature sr=https%3a%2f%2fmyservicebus.servicebus.windows.net%2fmy-topic%2fmessages&amp;sig=z4C.....3d&amp;se=1570147127&amp;skn=RootManageSharedAccessKey</code>)<ul>\n<li>Note: It is required that the URL is encoded</li>\n</ul>\n</li>\n<li>Content-Type: application/xml</li>\n</ul>\n</li>\n<li>Body: Set to &#39;raw&#39; and add something similar to the following: <code>&lt;string xmlns=&quot;http://schemas.microsoft.com/2003/10/Serialization/&quot;&gt;This is an example message.&lt;/string&gt;</code></li>\n</ol>\n</li>\n<li><p>In Postman, click &#39;Send&#39;!</p>\n<ul>\n<li>The response status will be &#39;201 Created&#39; if completed successfully</li>\n</ul>\n</li>\n</ol>\n<h2 id=\"helpful-resources\">Helpful Resources:</h2>\n<ul>\n<li><a href=\"https://docs.microsoft.com/en-us/rest/api/servicebus/\">Azure Service Bus REST API</a></li>\n<li><a href=\"https://docs.microsoft.com/en-us/rest/api/servicebus/send-message-to-queue\">https://docs.microsoft.com/en-us/rest/api/servicebus/send-message-to-queue</a><ul>\n<li>This source mentions authorization must be either a WRAP token or SAS token. I take this as the reason I wasn&#39;t able to get a regular JWT bearer token working, which does work with Resource Management API.</li>\n</ul>\n</li>\n<li><a href=\"https://stackoverflow.com/questions/50914924/send-msg-to-azure-service-bus-que-via-rest\">https://stackoverflow.com/questions/50914924/send-msg-to-azure-service-bus-que-via-rest</a></li>\n<li><a href=\"https://docs.microsoft.com/en-us/azure/service-bus-messaging/service-bus-sas\">https://docs.microsoft.com/en-us/azure/service-bus-messaging/service-bus-sas</a><ul>\n<li>Note: There&#39;s a note there about using OAuth 2.0 instead of SAS, but I haven&#39;t gotten the OAuth method working yet.</li>\n</ul>\n</li>\n<li>Helpful for using Resource Management via Postman: <a href=\"https://blog.jongallant.com/2017/11/azure-rest-apis-postman/\">Azure REST APIs with Postman</a></li>\n<li><a href=\"https://docs.microsoft.com/en-us/azure/active-directory/develop/reference-aadsts-error-codes\">Azure AD (Active Directory) error codes</a></li>\n</ul>\n<p>I ran into a few issues when learning about connecting Postman with Azure Service Bus via REST. Just about all articles where out-of-date or had some wrong information in it. I&#39;ll just summarize a few of the issues here:</p>\n<ul>\n<li>In REST requests, the <code>resource</code> parameter has been removed and changed to <code>scope</code>, and they have completely different values. More info: </li>\n<li>Other protocol changes: <a href=\"https://docs.microsoft.com/en-us/azure/active-directory/develop/azure-ad-endpoint-comparison#protocol-changes\">https://docs.microsoft.com/en-us/azure/active-directory/develop/azure-ad-endpoint-comparison#protocol-changes</a></li>\n</ul>\n","title":"How to connect Postman to Microsoft Azure Service Bus via REST","tags":["Microsoft","Azure","Postman"],"file":"2019-10-03-how-to-connect-postman-to-microsoft-azure-service-bus-via-rest.md","date":"2019-10-03","slug":"2019-10-03-how-to-connect-postman-to-microsoft-azure-service-bus-via-rest","next":{"slug":"2020-02-21-how-to-create-a-custom-visual-in-power-bi-using-google-charts","name":"How to create a custom visual in Power BI using Google Charts"},"previous":{"slug":"2019-05-25-simple-sample-android-in-app-billing-v2-in-kotlin","name":"Simple sample of Android in-app billing v2 in Kotlin"}}