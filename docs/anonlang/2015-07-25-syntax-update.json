{"html":"<p>In a programming language, is it possible to get away with having no keywords?</p>\n<p>There are two main syntax ideas that I&#39;m thinking about. One way would involve implicit strings in many places and the other would require the single-quote surrounding strings. The other question for this syntax design is.. should the equals sign be made more explicit?</p>\n<p>From a previous post about syntax, it was clear to see where the strings were because it is easy to make a requirement that variable names must not have spaces in them. </p>\n<p>One of the likely requirements may likely be that all white-space can be removed and the program will still be valid, thus the reason for explicit semi-colons instead of using new-line as a token-break. </p>\n<p>Maybe all equals signs can be optional also? But, I&#39;d rather not have both options available so that more code will look similar. So, no equals signs anywhere!?!? But, that rule would contradict with the white-space-not-needed rule.. so, always require equals sign where it would change program if white-space were removed. Hmm, sounds good for now.</p>\n<p>With the above questions still out in the open, here&#39;s an explicit example for how to have fewer characters in a data structure markup in Anonlang:</p>\n<pre class='language-javascriptreact'><code>labelCategory [\n    label1(id, name, food) [\n        <span class=\"hljs-number\">1</span>, A Name, fish;\n        <span class=\"hljs-number\">2</span>, Another, pizza;\n        <span class=\"hljs-number\">3</span>, Boise, watermelon;\n    ]\n    label2(id, name, ingredientA, ingredientB, ingredientC=none) [\n        <span class=\"hljs-number\">1</span>, popsicle, water, heat extractor;\n        <span class=\"hljs-number\">2</span>, popcorn, unpopcorn, heat;\n        <span class=\"hljs-number\">3</span>, pop, water, sugar, bubbles;\n    ]\n]</code></pre><p>The above certainly fits in the aforementioned potential rules/requirements, but one drawback is that it doesn&#39;t allow the direct support for CSV because of the semi-colon. One idea could be to have a &quot;meta-params&quot; option:</p>\n<pre class='language-javascriptreact'><code>label1(id, name, food)(format=csv) [\n    <span class=\"hljs-number\">1</span>, A Name, fish\n    <span class=\"hljs-number\">2</span>, Another, pizza\n    <span class=\"hljs-number\">3</span>, Boise, watermelon\n]</code></pre><p>Hmmm, then that requires a keyword. So, another idea could be to have a <code>.format[csv]</code> after the map, but developers don&#39;t read the bottom first. So, the keyword idea is still a better choice so far.</p>\n<p>It seems great to be able to back-support other formats neat in code. And, adapters for each type can be built easily enough. Maybe we could also allow the tooling to automatically code-generate between formats to put there also.</p>\n<p>Hmm, meta programming constructs could quickly get messy also. May be best to have automatic converters built-in. Though, a nice meta feature would be being able to specify the tradeoffs wanted in an algorithm -- less space or less time.</p>\n<p>If no meta, then maybe a format could be like:</p>\n<pre class='language-javascriptreact'><code>label1 = csv[\n    id, name, food\n    <span class=\"hljs-number\">1</span>, A Name, fish\n    <span class=\"hljs-number\">2</span>, Another, pizza\n    <span class=\"hljs-number\">3</span>, Boise, watermelon\n]</code></pre><p>Hmm, many considerations. I&#39;ve got time.</p>\n","title":"Syntax Update","file":"2015-07-25-syntax-update.md","date":"2015-07-25","slug":"2015-07-25-syntax-update"}