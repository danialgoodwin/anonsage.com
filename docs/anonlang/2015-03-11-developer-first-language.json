{"html":"<p>What does a &quot;developer-first language&quot; entail?</p>\n<p>What could a developer-first language entail?</p>\n<ul>\n<li>No boilerplate code and minimal typing.</li>\n<li>Ultimate reusability of code, including seemlessly using other devs&#39; code. No fuss integration.</li>\n<li>Easiest discoverability of great open-source modular code.</li>\n<li>The best tooling for the language.<ul>\n<li>Automatically figure out space and time complexities.</li>\n</ul>\n</li>\n<li>Abstractions on abstractions on abstractions to be more productive.</li>\n<li>GUI and game environment generation as easy as thinking about it.</li>\n<li>Fast.</li>\n<li>Tests write (and run) themselves. And, can automatically figure out test cases.</li>\n<li>One language that is great at everything (and cross-platform).</li>\n<li>Anything that may be seen as a limitation in the language can be modularized and replaced dynamically. (How about conditional imports/includes/requires/uses?)</li>\n<li>Easy concurrency. (How about everything off the main/UI thread by default? And, when updating UI, getting to the UI thread is automatic?)</li>\n</ul>\n<p>To help out the above ideas:</p>\n<ul>\n<li>The language should be rigid when we need it to be and malleable when we want it to be.</li>\n<li>An evolving language.</li>\n<li>Internet connected(?)</li>\n</ul>\n<p>What are some other high-level wants/needs?</p>\n","title":"Developer-First Language","file":"2015-03-11-developer-first-language.md","date":"2015-03-11","slug":"2015-03-11-developer-first-language"}