{"html":"<p>For the longest time, I was just planning on renaming &#39;for&#39; loops and &#39;while&#39; loops to just <code>loop</code> with <code>in</code> and pretty much calling it done.</p>\n<p>Another feature that I knew I wanted to have was to make it simple for double-loops, for example: <code>loop i, j in row, col</code>. This was easy enough to do and the syntax expanded nicely into triple-loops and more (not that it would often be used).</p>\n<p>Today, as I was exploring more use cases, I wanted to loop the results from transforming the first loop, for example: converting CSV to double-quoted CSV. A simple typical example would be similar to:</p>\n<pre class='language-javascriptreact'><code>csv = <span class=\"hljs-string\">''</span>\nloop row <span class=\"hljs-keyword\">in</span> csv.split(<span class=\"hljs-string\">'\\n'</span>):\n    loop element <span class=\"hljs-keyword\">in</span> row.split(<span class=\"hljs-string\">','</span>):\n        <span class=\"hljs-comment\"># Do somthing</span></code></pre><p><small>Side idea: <code>split()</code> for multi-line could default by new line. If single line, then default to spaces. But, I suppose that could be confusing and unexpected.</small></p>\n<p>But, I wanted better, and I couldn&#39;t directly use the double-loop syntax, <code>loop i, j in a1, a2</code>. I thought of various ways to accomplish this goal, maybe <code>loop csv as line, line.split()</code> or <code>loop csv to line to split()</code>. None of those looked right. Though, I finally found my favorite syntax to use:</p>\n<pre class='language-javascriptreact'><code>csv.loop().split(<span class=\"hljs-string\">','</span>).join(<span class=\"hljs-string\">'\",\"'</span>, <span class=\"hljs-string\">'\"'</span>, <span class=\"hljs-string\">'\"'</span>)\ncsv.split(<span class=\"hljs-string\">'\\n'</span>).split(<span class=\"hljs-string\">','</span>).join(<span class=\"hljs-string\">'\",\"'</span>, <span class=\"hljs-string\">'\"'</span>, <span class=\"hljs-string\">'\"'</span>)</code></pre><p>Pros:</p>\n<ul>\n<li>Simple</li>\n<li>Straight to the point</li>\n<li>Reads in a single direction, left-to-right, without jumping around</li>\n<li>No unnecessary temporary (explicit) variables</li>\n<li>Can be procedural or generative or parallel for each step (think Python generators, Java Collections Streams, or other map-reduce)</li>\n</ul>\n<p>But, unfortunately, this exact syntax can be a little ambiguous in other use cases. For example, what if we wanted to add a word to the end of each CSV line or just append a new line at the end of the list? Both of those use cases would look like <code>csv.loop().add(&#39;...&#39;)</code>. So, we need to have a keyword that means something similar to &#39;for-each-element&#39;. Unfortunately, neither &#39;foreach()&#39; or &#39;loop()&#39; or &#39;iterate()&#39; or &#39;elements()&#39; sound exactly right to me, for now. Maybe &#39;loop()&#39; would be used the same way as Java&#39;s &#39;stream()&#39; or another language&#39;s &#39;map()&#39;. So, to remove ambiguity from above, we could do a slight change to:</p>\n<pre class='language-javascriptreact'><code>csv.split(<span class=\"hljs-string\">'\\n'</span>).loop().split(<span class=\"hljs-string\">','</span>).join(...).join(<span class=\"hljs-string\">'\\n'</span>)\ncsv.split(<span class=\"hljs-string\">'\\n'</span>).foreach().split(<span class=\"hljs-string\">','</span>).join(...).join(<span class=\"hljs-string\">'\\n'</span>)</code></pre><p>That&#39;s all for now until I do more background research on other languages and how they handle streaming and mapping.</p>\n","title":"Loop Syntax","file":"2020-04-01-loop-syntax.md","date":"2020-04-01","slug":"2020-04-01-loop-syntax"}